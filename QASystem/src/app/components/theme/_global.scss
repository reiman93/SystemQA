@use "sass:map";
@use "@angular/material" as mat;

@mixin color($theme) {
  $color-config: mat.get-color-config($theme);
  $primary: map.get($color-config, primary);
  $f: map.get($color-config, foreground);
  $b: map.get($color-config, background);
  $w: map.get($color-config, warn);

  mat-icon {
    color: mat.get-color-from-palette($f, icon) !important;
    &:hover {
      color: mat.get-color-from-palette($primary, 500) !important;
      background: none !important;
      mat-icon {
        color: mat.get-color-from-palette($primary, 500) !important;
      }
    }
  }

  .mat-raised-button:not([color]) {
    background-color: mat.get-color-from-palette($b, basic) !important;
  }

  button[mat-raised-button]:not([disabled]) {
    &:hover {
      background-color: mat.get-color-from-palette($primary, 500) !important;
      color: mat.get-color-from-palette($f, app-bar);
    }
  }

  app-header mat-icon {
    &:not(:hover) {
      color: mat.get-color-from-palette($f, app-bar) !important;
    }
  }

  .hr-row {
    border-top: 1px solid mat.get-color-from-palette($f, divider) !important;
  }

  .requeried::before,
  .error {
    color: mat.get-color-from-palette($w, 500) !important;
  }

  .requeried{
    position: relative !important;
    padding-left: 8px !important;
}

.requeried::before{
    content: '*' !important;
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
}

}

@mixin theme($theme) {
  $color-config: mat.get-color-config($theme);
  @if $color-config != null {
    @include color($theme);
  }
}
